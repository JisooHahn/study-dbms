/*항상 범위 주석을 사용한다.*/

/*
 * 회원 테이블
 * 
 * 회원 번호
 * 회원 아이디
 * 회원 비밀번호
 * 회원 나이
 * 
 * */
CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_ID VARCHAR2(1000) CONSTRAINT UK_MEMBER UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(1000) NOT NULL,
   MEMBER_AGE NUMBER(3) CONSTRAINT CHECK_AGE CHECK(MEMBER_AGE > 0)
);

/*
 * 주문 테이블
 * 
 * 주문 번호
 * 회원 번호
 * 주문 날짜
 * 주문 개수
 * */
CREATE TABLE TBL_ORDER(
   ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
   MEMBER_ID NUMBER NOT NULL,
   ORDER_DATE DATE DEFAULT SYSDATE,
   ORDER_COUNT NUMBER DEFAULT 1,
   CONSTRAINT FK_ORDER_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID)
);

/*
 * 동물원 테이블
 * 
 * 고유 번호
 * 동물원 이름
 * 동물원 주소
 * 동물원 상세 주소
 * 동물 최대 수용치
 * */
CREATE TABLE TBL_ZOO(
   ID NUMBER CONSTRAINT PK_ZOO PRIMARY KEY,
   ZOO_NAME VARCHAR2(1000),
   ZOO_ADDRESS VARCHAR2(1000),
   ZOO_ADDRESS_DETAIL VARCHAR2(1000),
   ZOO_MAX_ANIMAL NUMBER DEFAULT 0
);

/*
 * 동물 테이블
 * 
 * 고유 번호
 * 동물 이름
 * 동물 종류
 * 동물 나이
 * 동물 키
 * 동물 몸무게
 * 동물원 번호
 * 
 * */
CREATE TABLE TBL_ANIMAL(
   ID NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
   ANIMAL_NAME VARCHAR2(1000),
   ANIMAL_TYPE VARCHAR2(1000) NOT NULL,
   ANIMAL_AGE NUMBER DEFAULT 0,
   ANIMAL_HEIGHT NUMBER(10, 5),
   ANIMAL_WEIGHT NUMBER(10, 5),
   ZOO_ID NUMBER NOT NULL,
   CONSTRAINT FK_ANIMAL_ZOO FOREIGN KEY(ZOO_ID)
   REFERENCES TBL_ZOO(ID)
);

/*
 * 회사와 직원
 * 
 * */

CREATE TABLE TBL_COMPANY(
   ID NUMBER CONSTRAINT PK_COMPANY PRIMARY KEY,
   COMPANY_NAME VARCHAR2(1000) NOT NULL,
   COMPANY_ADDRESS VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_EMPLOYEE(
   ID NUMBER CONSTRAINT PK_EMPLOYEE PRIMARY KEY,
   EMPLOYEE_NAME VARCHAR2(1000) NOT NULL,
   COMPANY_ID NUMBER NOT NULL,
   CONSTRAINT FK_EMPLOYEE_COMPANY FOREIGN KEY(COMPANY_ID)
   REFERENCES TBL_COMPANY(ID)
);

/*
 *       회원         주문            상품
      -------------------------------------      
      	번호P      		번호P        번호P
      -------------------------------------
      이메일U NN   날짜D(SYSDATE)   이름NN
      비밀번호NN   회원번호F         가격D(0)
      이름NN      상품번호F         재고D(0)
      주소NN      
      생일
 * */

CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_EMAIL VARCHAR2(1000) UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(1000) NOT NULL,
   MEMBER_NAME VARCHAR2(1000) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(1000) NOT NULL,
   MEMBER_BIRTH DATE
);

CREATE TABLE TBL_PRODUCT(
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_NAME VARCHAR2(1000) NOT NULL,
   PRODUCT_PRICE NUMBER DEFAULT 0,
   PRODUCT_STOCK NUMBER DEFAULT 0
);

CREATE TABLE TBL_ORDER(
   ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
   ORDER_DATE DATE DEFAULT SYSDATE,
   MEMBER_ID NUMBER NOT NULL,
   PRODUCT_ID NUMBER NOT NULL,
   CONSTRAINT FK_ORDER_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID),
   CONSTRAINT FK_ORDER_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);

/*
 * 1. 요구사항 분석
 * 	꽃 테이블과 화분 테이블 2개가 필요하고,
 * 	꽃을 구매할 떄 화분도 같이 구매합니다.
 *  꽃은 이름과 색상, 가격이 있고
 * 	화분은 제품번호, 색상, 모양이 있습니다.
 *  화분은 모든 꽃을 담을 수 없고 정해진 꽃을 담아야 합니다.
 * 
 * 2. 개념 모델링
 * 	꽃		화분
 * 
 *  번호		번호
 * 	이름		색상
 * 	색상		모양
 * 	가격
 * 	화분번호
 * ===============================
 *  꽃			주문			화분
 *  
 * 	번호			번호			번호
 * 	이름			날짜			색상
 *  색상			화분번호		모양
 *  가격			꽃번호
 * 
 * 3. 논리 모델링
 * 
 * 꽃		화분
 * ----------------
 * 번호P		번호P
 * ----------------
 * 이름UNN	색상
 * 색상 NN	모양
 * 가격D(0)	
 * 화분번호F

 * ======================================
 *  꽃				주문				화분
 * 	-------------------------------------
 * 	번호P				번호P				번호P
 * 	-------------------------------------
 * 	이름U	NN			날짜D(SYSDATE)	색상
 *  색상 NN			화분번호F			모양
 * 	가격D(0)			꽃번호F
 * 
 * 4. 물리 모델링
 *  * TBL_FLOWER
 * -----------------------
 * ID: NUMBER PK_FLOWER
 * -----------------------
 * FLOWER_NAME: VARCHAR2(1000) UNIQUE NOT NULL
 * FLOWER_COLOR: VARCHAR2(1000) NOT NULL
 * FLOWER_PRICE: NUMBER DEFAULT 0
 * POT_ID: NUMBER FOREIGN KEY NOT NULL
 * 
 * TBL_POT
 * -----------------------
 * ID: NUMBER PK_POT
 * -----------------------
 * POT_COLOR: VARCHAR2(1000) 
 * POT_SHAPE: VARCHAR2(1000)
 * 
 * =============================================
 * TBL_FLOWER
 * -----------------------
 * ID: NUMBER PK_FLOWER
 * -----------------------
 * FLOWER_NAME: VARCHAR2(1000) UNIQUE NOT NULL
 * FLOWER_COLOR: VARCHAR2(1000) NOT NULL
 * FLOWER_PRICE: NUMBER DEFAULT 0
 * 
 * TBL_ORDER
 * -----------------------
 * ID: NUMBER PK_ORDER
 * -----------------------
 * ORDER_DATE: DATE DEFAULT SYSDATE NOT NULL
 * POT_ID: NUMBER FOREIGN KEY NOT NULL
 * FLOWER_ID: NUMBER FOREIGN KEY NOT NULL
 * 
 * TBL_POT
 * -----------------------
 * ID: NUMBER PK_POT
 * -----------------------
 * POT_COLOR: VARCHAR2(1000) 
 * POT_SHAPE: VARCHAR2(1000)
 * 
 * 5. 구현*/

 /* ** 쉬운 버전: 하나의 화분은 1개 종류의 꽃만 담을 수 있다.
 * */

CREATE TABLE TBL_FLOWER(
	ID NUMBER CONSTRAINT PK_FLOWER PRIMARY KEY,
	FLOWER_NAME VARCHAR2(1000) UNIQUE NOT NULL,
	FLOWER_COLOR VARCHAR2(1000) NOT NULL,
	FLOWER_PRICE NUMBER DEFAULT 0
);

CREATE TABLE TBL_POT(
	ID NUMBER CONSTRAINT PK_POT PRIMARY KEY,
	POT_COLOR VARCHAR2(1000),
	POT_SHAPE VARCHAR2(1000),
	FLOWER_ID NUMBER,
	CONSTRAINT FK_POT_FLOWER FOREIGN KEY(FLOWER_ID)
   	REFERENCES TBL_FLOWER(ID)
);

/*어려운 버전: 하나의 화분은 여러 종류의 꽃을 담을 수 있다.
CREATE TABLE TBL_FLOWER(
	ID NUMBER CONSTRAINT PK_FLOWER PRIMARY KEY,
	FLOWER_NAME VARCHAR2(1000) UNIQUE NOT NULL,
	FLOWER_COLOR VARCHAR2(1000) NOT NULL,
	FLOWER_PRICE NUMBER DEFAULT 0
);

CREATE TABLE TBL_POT(
	ID NUMBER CONSTRAINT PK_POT PRIMARY KEY,
	POT_COLOR VARCHAR2(1000),
	POT_SHPAE VARCHAR2(1000)
);

CREATE TABLE TBL_ORDER(
	ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
	ORDER_DATE DATE DEFAULT SYSDATE NOT NULL,
	POT_ID NUMBER NOT NULL,
	FLOWER_ID NUMBER NOT NULL,
	CONSTRAINT FK_ORDER_POT FOREIGN KEY(POT_ID)
   	REFERENCES TBL_POT(ID),
   	CONSTRAINT FK_ORDER_FLOWER FOREIGN KEY(FLOWER_ID)
   	REFERENCES TBL_FLOWER(ID)
);
*/

/*
 * 1. 요구사항 분석
 *    안녕하세요, 동물병원을 곧 개원하는 원장입니다.
 *    동물은 보호자랑 항상 같이 옵니다. 가끔 보호소에서 오는 동물도 있습니다.
 *    보호자가 여러 마리의 동물을 데리고 올 수 있습니다.
 *    보호자는 이름, 나이, 전화번호, 주소 정보를 알려줘야 하고
 *    동물은 병명, 이름, 나이, 몸무게 정보가 필요합니다.
 * 
 * 2. 개념 모델링
 * 3. 논리 모델링
 * 4. 물리 모델링
 * 5. 구현 
 * 
 * 쉬운 버전: 한 명의 보호자당 여러 마리의 반려동물이 있다.
 * 어려운 버전: 보호소에서 온 동물은 따로 관리한다.
 * */

/*쉬운 버전*/
CREATE TABLE TBL_OWNER(
   ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
   OWNER_NAME VARCHAR2(1000) NOT NULL,
   OWNER_AGE NUMBER,
   OWNER_PHONE VARCHAR2(1000) NOT NULL,
   OWNER_ADDRESS VARCHAR2(1000) NOT NULL
);

/*ALTER TABLE TBL_OWNER ADD OWNER_ADDRESS VARCHAR2(1000) NOT NULL;*/

CREATE TABLE TBL_PET(
   ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
   PET_NAME VARCHAR2(1000),
   PET_AGE NUMBER DEFAULT 0,
   PET_WEIGHT NUMBER(3, 2) DEFAULT 0.0,
   PET_ILL_NAME VARCHAR2(1000),
   OWNER_ID NUMBER,
   CONSTRAINT FK_PET_OWNER FOREIGN KEY(OWNER_ID)
   REFERENCES TBL_OWNER(ID)
);

/*어려운 버전*/
CREATE TABLE TBL_CENTER(
   ID NUMBER CONSTRAINT PK_CENTER PRIMARY KEY,
   CENTER_NAME VARCHAR2(1000) NOT NULL,
   CENTER_PHONE VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_ANIMAL(
   ID NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
   PET_NAME VARCHAR2(1000),
   PET_AGE NUMBER DEFAULT 0,
   PET_WEIGHT NUMBER(3, 2) DEFAULT 0.0,
   PET_ILL_NAME VARCHAR2(1000)
);

DROP TABLE TBL_PET;
CREATE TABLE TBL_PET(
   ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
   OWNER_ID NUMBER NOT NULL,
   CONSTRAINT FK_PET_ANIMAL FOREIGN KEY(ID)
   REFERENCES TBL_ANIMAL(ID),
   CONSTRAINT FK_PET_OWNER FOREIGN KEY(OWNER_ID)
   REFERENCES TBL_OWNER(ID)
);

DROP TABLE TBL_CENTER_PET;
CREATE TABLE TBL_CENTER_PET(
   ID NUMBER CONSTRAINT PK_CENTER_PET PRIMARY KEY,
   CENTER_ID NUMBER NOT NULL,
   CONSTRAINT FK_CENTER_PET_ANIMAL FOREIGN KEY(ID)
   REFERENCES TBL_ANIMAL(ID),
   CONSTRAINT FK_CENTER_PET_CENTER FOREIGN KEY(CENTER_ID)
   REFERENCES TBL_CENTER(ID)
);

/*
1. 요구 사항
    커뮤니티 게시판을 만들고 싶어요.
    게시판에는 게시글 제목과 게시글 내용, 작성한 시간, 작성자가 있고,
    게시글에는 댓글이 있어서 댓글 내용들이 나와야 해요.
    작성자는 회원(TBL_MEMBER)정보를 그대로 사용해요.(이미 존재하는 TBL_MEMBER)
    댓글에도 작성자가 필요해요.

2. 개념 모델링
	일단 회원이랑 게시판은 있고 댓글이랑 게시판은 회원을 가져와...
	
	게시판			댓글
	
	번호				번호
	게시글 제목		댓글 내용
	게시글 내용		작성 시간
	작성 시간			회원번호
	회원번호
	댓글번호
	
3. 논리 모델링

	게시판			댓글
	------------------------
	번호P				번호P
	------------------------
	제목NN			내용NN
	내용NN			시간D(SYSDATE)
	시간D(SYSDATE)	회원번호F NN
	회원번호F NN		게시글번호F NN
	
	
4. 물리 모델링

TBL_BOARD
-----------------------
ID: NUMBER PK_BOARD
-----------------------
BOARD_TITLE VARCHAR2(1000) NOT NULL
BOARD_TEXT VARCHAR2(1000) NOT NULL
BOARD_DATE DATE DEFAULT SYSDATE 
MEMBER_ID NUMBER NOT NULL
 
TBL_COMMENT
-----------------------
ID: NUMBER PK_COMMENT
-----------------------
COMMENT_TEXT VARCHAR2(1000) NOT NULL
COMMENT_DATE DATE DEFAULT SYSDATE 
MEMBER_ID NUMBER NOT NULL
BOARD_ID NUMBER NOT NULL

5. 구현
*/
CREATE TABLE TBL_POST(
	ID NUMBER CONSTRAINT PK_POST PRIMARY KEY,
	POST_TITLE VARCHAR2(1000) NOT NULL,
	POST_TEXT VARCHAR2(1000) NOT NULL,
	POST_DATE DATE DEFAULT SYSDATE, 
	MEMBER_ID NUMBER NOT NULL,
	CONSTRAINT FK_BOARD_MEMBER FOREIGN KEY(MEMBER_ID)
   	REFERENCES TBL_MEMBER(ID)
);

CREATE TABLE TBL_COMMENT(
	ID NUMBER CONSTRAINT PK_COMMENT PRIMARY KEY,
	COMMENT_TEXT VARCHAR2(1000),
	COMMENT_DATE DATE DEFAULT SYSDATE, 
	MEMBER_ID NUMBER NOT NULL,
	POST_ID NUMBER NOT NULL,
	CONSTRAINT FK_COMMENT_MEMBER FOREIGN KEY(MEMBER_ID)
   	REFERENCES TBL_MEMBER(ID),
   	CONSTRAINT FK_COMMENT_POST FOREIGN KEY(POST_ID)
   	REFERENCES TBL_POST(ID)
);

/*
1. 요구 사항
    마이페이지에서 회원 프로필(프로필 사진)을 구현하고 싶습니다.
    회원당 프로필을 여러 개 설정할 수 있고,
    대표 이미지로 선택된 프로필만 화면에 보여주고 싶습니다.
    
    파일:
    경로, 크기, 이름

2. 개념 모델링
	회원이랑 프로필은 이어져있다.
	프로필은 여러개라 프로필쪽에서 회원ID를 FK로 가져와야한다.
	프로필이랑 대표프로필은 회원을 상속받는다...?

회원			프로필		

번호			번호				
이름			이미지경로		
이메일		크기				
비밀번호		이름							
전화번호		회원번호						
주소
				
3. 논리 모델링

회원			프로필		
-------------------------
번호P			번호P				
-------------------------
이름	NN		경로 NN 		
이메일 U NN	이름 NN								
비밀번호 NN	크기 NN							
전화번호 NN	대표프로필 D(F)					
주소	NN		회원번호F	NN	

4. 물리 모델링

TBL_MEMBER
----------------------------------
ID: NUMBER PK_MEMBER
----------------------------------
MEMBER_NAME: VARCHAR2(1000) NOT NULL
MEMBER_EMAIL: VARCHAR2(1000) UNIQUE NOT NULL
MEMBER_PASSWORD: VARCHAR2(1000) NOT NULL
MEMBER_PHONE: VARCHAR2(1000) NOT NULL
MEMBER_ADDRESS: VARCHAR2(1000) NOT NULL

TBL_PROFILE
----------------------------------
ID: NUMBER PK_PROFILE
----------------------------------
PROFILE_PATH: VARCHAR2(1000) NOT NULL
PROFILE_NAME: VARCHAR2(1000) NOT NULL
PROFILE_SIZE: NUMBER NOT NULL
PROFILE_REP: BOOLEAN DEFAULT FALSE
MEMBER_ID: NUMBER NOT NULL

5. 구현*/

CREATE TABLE TBL_FILE(
	ID NUMBER CONSTRAINT PK_FILE PRIMARY KEY,
	FILE_PATH VARCHAR2(1000) NOT NULL,
	FILE_NAME VARCHAR2(1000) NOT NULL,
	FILE_SIZE NUMBER NOT NULL,
	FILE_REP VARCHAR2(1000) DEFAULT '일반',
	MEMBER_ID NUMBER NOT NULL,
	CONSTRAINT FK_PROFILE_MEMBER FOREIGN KEY(MEMBER_ID)
   	REFERENCES TBL_MEMBER(ID)	
);
/*파일의 대표여부는 '대표'같이 문자열로 표시되기 때문에 VARCHAR2 형태로 쓴다*/

/*
1. 요구 사항
    회원들끼리 좋아요를 누를 수 있습니다.
    
    회원의 공통된 특성을 갖고있는 슈퍼키 회원(회원정보와 좋아요 기능), 서브키는 회원이름
    마이페이지에 내가 좋아요 누른 회원
    좋아요가 체크가 됐는지를 화면에 표시해야됨
    누군가 내게 좋아요를 눌렀는지, 내가 누구한테 좋아요를 눌렀는지?    
    좋아요를 *받은* 사람과 *준* 사람 둘 다 저장해야 한다
    LIKE라는 테이블 필요

2. 개념 모델링
	회원				회원1					회원2				좋아요
	
	번호				번호					번호				좋아요 누른 회원
	이름				회원번호				회원번호			좋아요 받은 회원
	이메일												회원ID


3. 논리 모델링
	회원				회원1					회원2				좋아요
	-----------------------------------------------------------	
	번호P				번호P					번호P				번호P
	-----------------------------------------------------------
	이름NN			회원번호F				회원번호F			좋아요 누른 회원
	이메일U NN											좋아요 받은 회원
														회원ID F

4. 물리 모델링
	TBL_LEE
	-----------------------------------------
	ID: NUMBER PK_LEE
	-----------------------------------------
	MEMBER_ID: NUMBER NOT NULL FOREIGN KEY 

	TBL_HONG
	-----------------------------------------
	ID: NUMBER PK_HONG
	-----------------------------------------
	MEMBER_ID: NUMBER NOT NULL FOREIGN KEY 
	
	TBL_LIKE
	-----------------------------------------
	ID: NUMBER PK_LIKE
	-----------------------------------------
	LIKE_GIVE: VARCHAR2(1000)
	LIKE_GET: VARCHAR2(1000) 
	MEMBER_ID: NUMBER NOT NULL FOREIGN KEY 
	LEE_ID: NUMBER NOT NULL FOREIGN KEY 
	HONG_ID: NUMBER NOT NULL FOREIGN KEY
	
5. 구현
*/
CREATE TABLE TBL_LIKE(
	ID NUMBER CONSTRAINT PK_LIKE PRIMARY KEY,
	LIKE_RECEIVER NUMBER NOT NULL,
	LIKE_SENDER NUMBER NOT NULL,
	CONSTRAINT FK_LIKE_MEMBER_RECEIVER FOREIGN KEY(LIKE_RECEIVER)
   	REFERENCES TBL_MEMBER(ID),	
   	CONSTRAINT FK_LIKE_MEMBER_SENDER FOREIGN KEY(LIKE_SENDER)
   	REFERENCES TBL_MEMBER(ID)	
);

/*
1. 요구사항 분석
	안녕하세요 중고차 딜러입니다.
    이번에 자동차와 차주를 관리하고자 방문했습니다.
    자동차는 여러 명의 차주로 히스토리에 남아야 하고,
    차주는 여러 대의 자동차를 소유할 수 있습니다.
    그래서 우리는 항상 등록증(Registration)을 작성합니다.
    자동차는 브랜드, 모델명, 가격, 출시날짜가 필요하고
    차주는 이름, 전화번호, 주소가 필요합니다.

	자동차와 차주는 다대다 관계, 중간에 등록증 테이블을 만들어야 한다.
	자동차는 히스토리로 차주의 번호(ID)를 받아와야 한다.

2. 개념 모델링
	차주				등록증			자동차			

	번호				번호				번호	
	이름				차주번호			브랜드
	전화번호			자동차번호			모델명
	주소								가격
									출시날짜
									히스토리
									
3. 논리 모델링
	차주				등록증				자동차			
	--------------------------------------------
	번호P				번호P					번호P	
	--------------------------------------------
	이름NN			차주번호F				브랜드
	전화번호U NN		자동차번호F			모델명
	주소	NN			등록일D(SYSDATE)		가격
										출시날짜D
										히스토리F(차주ID)

4. 물리 모델링
	TBL_OWNER
	-----------------------------------------
	ID: NUMBER PK_OWNER
	-----------------------------------------
	OWNER_NAME: VARCHAR2(1000) NOT NULL
	OWNER_PHONE: VARCHAR2(1000) UNIQUE NOT NULL
	OWNER_ADDRESS: VARCHAR2(1000) NOT NULL 

	TBL_CAR
	-----------------------------------------
	ID: NUMBER PK_CAR
	-----------------------------------------
	CAR_BRAND: VARCHAR2(1000)
	CAR_MODEL: VARCHAR2(1000) NOT NULL
	CAR_PRICE: NUMBER NOT NULL
	CAR_DATE: DATE NOT NULL
	CAR_HISTORY: NUMBER NOT NULL FOREIGN KEY
	
	TBL_REGISTRATION
	-----------------------------------------
	ID: NUMBER PK_REGISTRATION
	-----------------------------------------	
	OWNER_ID: NUMBER NOT NULL FOREIGN KEY
	CAR_ID: NUMBER NOT NULL FOREIGN KEY
	REGISTRATION_DATE: DATE DEFAULT SYSDATE
	
5. 구현
*/
CREATE TABLE TBL_OWNER(
	ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
	OWNER_NAME VARCHAR2(1000) NOT NULL,
	OWNER_PHONE VARCHAR2(1000) NOT NULL,
	OWNER_ADDRESS VARCHAR2(1000) NOT NULL	
);

CREATE TABLE TBL_CAR(
	ID NUMBER CONSTRAINT PK_CAR PRIMARY KEY,
	CAR_BRAND VARCHAR2(1000) NOT NULL,
	CAR_MODEL VARCHAR2(1000) NOT NULL,
	CAR_PRICE NUMBER DEFAULT 0,
	CAR_DATE DATE,
	CAR_HISTORY NUMBER NOT NULL
);

CREATE TABLE TBL_REGISTRATION(
	ID NUMBER CONSTRAINT PK_REGISTRATION PRIMARY KEY,
	OWNER_ID NUMBER NOT NULL,
	CAR_ID NUMBER NOT NULL,
	CONSTRAINT FK_REGISTRATION_OWNER FOREIGN KEY(OWNER_ID)
   	REFERENCES TBL_OWNER(ID),
   	CONSTRAINT FK_REGISTRATION_CAR FOREIGN KEY(CAR_ID)
   	REFERENCES TBL_CAR(ID)
);

/*
1. 요구사항

    학사 관리 시스템에 학생과 교수, 과목을 관리합니다.
    학생은 학번, 이름, 전공, 학년이 필요하고
    교수는 교수 번호, 이름, 전공, 직위가 필요합니다.
    과목은 고유한 과목 번호와 과목명, 학점이 필요합니다.
    학생은 여러 과목을 수강할 수 있으며,
    교수는 여러 과목을 강의할 수 있습니다.
    학생이 수강한 과목은 성적(점수)이 모두 기록됩니다.
    
    학생, 교수, 과목 테이블이 필요해보인다.
    학생과 교수 다대다를 잇는 과목테이블!
    
2. 개념 모델링
	학생			교수			과목

	번호			번호			번호
	이름			이름			과목명
	전공			전공			학점
	학년			직위			학생번호
							교수번호
		
3. 논리 모델링
	학생			교수			과목
	---------------------------------
	번호P			번호P			번호P
	---------------------------------
	이름UNN		이름UNN		과목명NN
	전공NN		전공NN		학점
	학년NN		직위NN		학생번호F
							교수번호F
		
4. 물리 모델링
	TBL_STUDENT
	-----------------------------------------
	ID: NUMBER PK_STUDENT
	-----------------------------------------
	STUDENT_NAME: VARCHAR2(1000) UNIQUE NOT NULL
	STUDENT_MAJOR: VARCHAR2(1000) NOT NULL
	STUDENT_GRADE: NUMBER NOT NULL
	
	TBL_PROFESSOR
	-----------------------------------------
	ID: NUMBER PK_PROFESSOR
	-----------------------------------------
	PROFESSOR_NAME: VARCHAR2(1000) UNIQUE NOT NULL
	PROFESSOR_MAJOR: VARCHAR2(1000) NOT NULL
	PROFESSOR_POSITION: VARCHAR2(1000) NOT NULL
		
	TBL_SUBJECT
	-----------------------------------------
	ID: NUMBER PK_SUBJECT
	-----------------------------------------
	SUBJECT_NAME: VARCHAR2(1000) NOT NULL
	SUBJECT_SCORE: NUMBER
	STUDENT_ID: NUMBER NOT NULL
	PROFESSOR_ID: NUMBER NOT NULL

5. 구현
*/
CREATE TABLE TBL_STUDENT(
	ID NUMBER CONSTRAINT PK_STUDENT PRIMARY KEY,
	STUDENT_NAME VARCHAR2(1000) NOT NULL,
	STUDENT_MAJOR VARCHAR2(1000) NOT NULL,
	STUDENT_GRADE NUMBER DEFAULT 1
);

CREATE TABLE TBL_PROFESSOR(
	ID NUMBER CONSTRAINT PK_PROFESSOR PRIMARY KEY,
	PROFESSOR_NAME VARCHAR2(1000) NOT NULL,
	PROFESSOR_MAJOR VARCHAR2(1000) NOT NULL,
	PROFESSOR_POSITION VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_SUBJECT(
	ID NUMBER CONSTRAINT PK_SUBJECT PRIMARY KEY,
	SUBJECT_NAME VARCHAR2(1000) NOT NULL,
	SUBJECT_SCORE NUMBER(3,2) DEFAULT 0.0
);

CREATE TABLE TBL_STUDENT_SUBJECT(
	ID NUMBER CONSTRAINT PK_STUDENT_SUBJECT PRIMARY KEY,
	STUDENT_ID NUMBER NOT NULL,
	SUBJECT_ID NUMBER NOT NULL,
	CONSTRAINT FK_STUDENT_SUBJECT_STUDENT FOREIGN KEY(STUDENT_ID)
   	REFERENCES TBL_STUDENT(ID),
   	CONSTRAINT FK_STUDENT_SUBJECT_SUBJECT FOREIGN KEY(SUBJECT_ID)
   	REFERENCES TBL_SUBJECT(ID)
);

CREATE TABLE TBL_LECTURE(
	ID NUMBER CONSTRAINT PK_LECTURE PRIMARY KEY,
	PROFESSOR_ID NUMBER NOT NULL,
	SUBJECT_ID NUMBER NOT NULL,
	CONSTRAINT FK_LECTURE_PROFESSOR FOREIGN KEY(PROFESSOR_ID)
   	REFERENCES TBL_PROFESSOR(ID),
   	CONSTRAINT FK_LECTURE_SUBJECT FOREIGN KEY(SUBJECT_ID)
   	REFERENCES TBL_SUBJECT(ID)
);

/*
1. 요구사항
    대카테고리, 소카테고리가 필요해요.
    
    대카 안에 소카
    대카테고리에는 고유 번호와 카테고리의 이름
    소카테고리에는 고유번호, 이름, 대카의 ID
    
2. 개념 모델링

	대카			소카
	
	번호			번호
	이름			이름
				대카번호
	
3. 논리 모델링

	대카			소카
	------------------
	번호P			번호P
	------------------
	이름UNN		이름UNN
				대카번호FNN

4. 물리 모델링

	TBL_MAJOR
	---------------------------------------------------
	ID: NUMBER PK_CATEGORY_MAJOR
	---------------------------------------------------
	MAJOR_NAME: VARCHAR(1000) UNIQUE NOT NULL
	
	TBL_MINOR
	---------------------------------------------------
	ID: NUMBER PK_CATEGORY_MAJOR
	---------------------------------------------------
	MINOR_NAME: VARCHAR(1000) UNIQUE NOT NULL
	MAJOR_ID: NUMBER NOT NULL FOREIGN

5. 구현
*/

CREATE TABLE TBL_MAJOR(
	ID NUMBER CONSTRAINT PK_MAJOR PRIMARY KEY,
	MAJOR_NAME VARCHAR(1000) UNIQUE NOT NULL
);

CREATE TABLE TBL_MINOR(
	ID NUMBER CONSTRAINT PK_MINOR PRIMARY KEY,
	MINOR_NAME VARCHAR(1000) UNIQUE NOT NULL,
	MAJOR_ID NUMBER NOT NULL,
	CONSTRAINT FK_MINOR_MAJOR FOREIGN KEY(MAJOR_ID)
   	REFERENCES TBL_MAJOR(ID)
);

/*
1. 요구사항
   회의실 예약 서비스를 제작하고 싶습니다.
   회원별로 등급이 존재하고 사무실마다 회의실이 여러 개 있습니다.
   회의실 이용 가능 시간은 파트 타임으로서 여러 시간대가 존재합니다.
    
   회원, 사무실, 회의실 테이블
2. 구현
*/

CREATE TABLE TBL_OFFICE(
	ID NUMBER CONSTRAINT PK_OFFICE PRIMARY KEY,
	OFFICE_NAME VARCHAR2(1000) NOT NULL,
	OFFICE_LOCATION VARCHAR2(1000) NOT NULL
);	

CREATE TABLE TBL_ROOM(
	ID NUMBER CONSTRAINT PK_ROOM PRIMARY KEY,
	ROOM_NAME VARCHAR2(1000) NOT NULL,
	OFFICE_ID NUMBER NOT NULL,
	CONSTRAINT FK_ROOM_OFFICE FOREIGN KEY(OFFICE_ID)
   	REFERENCES TBL_OFFICE(ID)
);	

CREATE TABLE TBL_PART_TIME(
	ID NUMBER CONSTRAINT PK_PART_TIME PRIMARY KEY,
	START_TIME DATE NOT NULL,
	END_TIME DATE NOT NULL,
	ROOM_ID NUMBER NOT NULL,
	CONSTRAINT FK_PART_TIME_ROOM FOREIGN KEY(ROOM_ID)
	REFERENCES TBL_ROOM(ID)
);

CREATE TABLE TBL_RESERVATION(
	ID NUMBER CONSTRAINT PK_RESERVATION PRIMARY KEY,
	PART_TIME_ID NUMBER NOT NULL,
	MEMBER_ID NUMBER NOT NULL,
	CONSTRAINT FK_RESERVATION_PART_TIME FOREIGN KEY(PART_TIME_ID)
   	REFERENCES TBL_PART_TIME(ID),
   	CONSTRAINT FK_RESERVATION_MEMBER FOREIGN KEY(MEMBER_ID)
   	REFERENCES TBL_MEMBER(ID)
);
/*
1. 요구사항
   유치원을 하려고 하는데, 아이들이 체험학습 프로그램을 신청해야 합니다.
   아이들 정보는 이름, 나이, 성별이 필요하고 학부모는 이름, 나이, 주소, 전화번호, 성별이 필요해요
   체험학습은 체험학습 제목, 체험학습 내용, 이벤트 이미지 여러 장이 필요합니다.
   아이들은 여러 번 체험학습에 등록할 수 있어요.
    
2. 구현
*/
CREATE TABLE TBL_KINDERGARTEN(
   ID NUMBER CONSTRAINT PK_KINDERGARTEN PRIMARY KEY,
   KINDERGARTEN_NAME VARCHAR2(1000) NOT NULL,
   KINDERGARTEN_ADDRESS VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_PARENT(
   ID NUMBER CONSTRAINT PK_PARENT PRIMARY KEY,
   PARENT_NAME VARCHAR2(1000) NOT NULL,
   PARENT_ADDRESS VARCHAR2(1000) NOT NULL,
   PARENT_PHONE VARCHAR2(1000) NOT NULL,
   PARENT_GENDER VARCHAR2(1000) DEFAULT '선택 안함'
);

CREATE TABLE TBL_CHILD(
   ID NUMBER CONSTRAINT PK_CHILD PRIMARY KEY,
   CHILD_AGE NUMBER NOT NULL,
   CHILD_GENDER VARCHAR2(1000) DEFAULT '여아',
   PARENT_ID NUMBER NOT NULL,
   CONSTRAINT FK_CHILD_PARENT FOREIGN KEY(PARENT_ID)
   REFERENCES TBL_PARENT(ID)
);

CREATE TABLE TBL_FIELD_TRIP(
   ID NUMBER CONSTRAINT PK_FIELD_TRIP PRIMARY KEY,
   FIELD_TRIP_TITLE VARCHAR2(1000) NOT NULL,
   FIELD_TRIP_CONTENT VARCHAR2(1000) NOT NULL,
   KINDERGARTEN_ID NUMBER NOT NULL,
   CONSTRAINT FK_FIELD_TRIP_KINDERGARTEN FOREIGN KEY(KINDERGARTEN_ID)
   REFERENCES TBL_KINDERGARTEN(ID)
);

CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_ID VARCHAR2(1000) CONSTRAINT UK_MEMBER UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(1000) NOT NULL,
   MEMBER_AGE NUMBER(3) CONSTRAINT CHECK_AGE CHECK(MEMBER_AGE > 0),
   KINDERGARTEN_ID NUMBER NOT NULL,
   CONSTRAINT FK_MEMBER_KINDERGARTEN FOREIGN KEY(KINDERGARTEN_ID)
   REFERENCES TBL_KINDERGARTEN(ID)
);

CREATE TABLE TBL_APPLY(
   ID NUMBER CONSTRAINT PK_APPLY PRIMARY KEY,
   CHILD_ID NUMBER NOT NULL,
   FIELD_TRIP_ID NUMBER NOT NULL,
   CONSTRAINT FK_APPLY_CHILD FOREIGN KEY(CHILD_ID)
   REFERENCES TBL_CHILD(ID),
   CONSTRAINT FK_APPLY_FIELD_TRIP FOREIGN KEY(FIELD_TRIP_ID)
   REFERENCES TBL_FIELD_TRIP(ID)
);
/*
1. 요구사항
   안녕하세요, 광고 회사를 운영하려고 준비중인 사업가입니다.
   광고주는 기업이고 기업 정보는 이름, 주소, 대표번호, 기업종류(스타트업, 중소기업, 중견기업, 대기업)입니다.
   광고는 제목, 내용이 있고 기업은 여러 광고를 신청할 수 있습니다.
   기업이 광고를 선택할 때에는 카테고리로 선택하며, 대카테고리, 중카테고리, 소카테고리가 있습니다.

   광고 밑에는 대카, 중카, 소카가 있음
   기업 밑에는 스타트업, 중소기업, 중견, 대기업이 있슴
   
2. 구현
*/

CREATE TABLE TBL_COMPANY(
	ID NUMBER CONSTRAINT PK_COMPANY PRIMARY KEY,
	COMPANY_NAME VARCHAR2(1000) NOT NULL,
	COMPANY_ADDRESS VARCHAR2(1000) NOT NULL,
	COMPANY_TEL VARCHAR2(1000) NOT NULL,
	COMPANY_SORT VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CATEGORY_A(
	ID NUMBER CONSTRAINT PK_CATEGORY_A PRIMARY KEY,
	CATEGORY_A_NAME VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CATEGORY_B(
	ID NUMBER CONSTRAINT PK_CATEGORY_B PRIMARY KEY,
	CATEGORY_B_NAME VARCHAR2(1000) NOT NULL,
	CATEGORY_A_ID NUMBER NOT NULL,
	CONSTRAINT FK_CATEGORY_B_CATEGORY_A FOREIGN KEY(CATEGORY_A_ID)
    REFERENCES TBL_CATEGORY_A(ID)
);

CREATE TABLE TBL_CATEGORY_C(
	ID NUMBER CONSTRAINT PK_CATEGORY_C PRIMARY KEY,
	CATEGORY_C_NAME VARCHAR2(1000) NOT NULL,
	CATEGORY_B_ID NUMBER NOT NULL,
	CONSTRAINT FK_CATEGORY_C_CATEGORY_B FOREIGN KEY(CATEGORY_B_ID)
    REFERENCES TBL_CATEGORY_B(ID)
);

CREATE TABLE TBL_COMMERCE(
	ID NUMBER CONSTRAINT PK_COMMERCE PRIMARY KEY,
	COMMERCE_TITLE VARCHAR2(1000) NOT NULL,
	COMMERCE_CONTENT VARCHAR2(1000) NOT NULL,
	CATEGORY_C_ID NUMBER NOT NULL,
	CONSTRAINT FK_COMMERCE_CATEGORY_C FOREIGN KEY(CATEGORY_C_ID)
    REFERENCES TBL_CATEGORY_C(ID)
);

CREATE TABLE TBL_CHOOSE(
	ID NUMBER CONSTRAINT PK_CHOOSE PRIMARY KEY,
	COMPANY_ID NUMBER NOT NULL,
	COMMERCE_ID NUMBER NOT NULL,
	CONSTRAINT FK_CHOOSE_COMPANY FOREIGN KEY(COMPANY_ID)
    REFERENCES TBL_COMPANY(ID),
    CONSTRAINT FK_CHOOSE_COMMERCE FOREIGN KEY(COMMERCE_ID)
    REFERENCES TBL_COMMERCE(ID)
);
/*
1. 요구사항
   음료수 판매 업체입니다. 음료수마다 당첨번호가 있습니다. 
   음료수의 당첨번호는 1개이고 당첨자의 정보를 알아야 상품을 배송할 수 있습니다.
   당첨 번호마다 당첨 상품이 있고, 당첨 상품이 배송 중인지 배송 완료인지 구분해야 합니다.

2. 개념 모델링
3. 논리 모델링
4. 물리 모델링
5. 구현
*/
CREATE TABLE TBL_SOFT_DRINK(
   ID NUMBER CONSTRAINT PK_SOFT_DRINK PRIMARY KEY,
   SOFT_DRINK_NAME VARCHAR2(1000)
);

CREATE TABLE TBL_PRODUCT(
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_NAME VARCHAR2(1000) NOT NULL,
   PRODUCT_STOCK NUMBER DEFAULT 0
);

CREATE TABLE TBL_LOTTERY(
   ID NUMBER CONSTRAINT PK_LOTTERY PRIMARY KEY,
   LOTTERY_NUMBER VARCHAR2(1000) NOT NULL,
   PRODUCT_ID NUMBER NOT NULL,
   CONSTRAINT FK_LOTTERY_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);

CREATE TABLE TBL_CIRCULATION(
   ID NUMBER CONSTRAINT PK_CIRCULATION PRIMARY KEY,
   SOFT_DRINK_ID NUMBER NOT NULL,
   LOTTERY_ID NUMBER NOT NULL,
   CONSTRAINT FK_CIRCULATION_SOFT_DRINK FOREIGN KEY(SOFT_DRINK_ID)
   REFERENCES TBL_SOFT_DRINK(ID),
   CONSTRAINT FK_CIRCULATION_LOTTERY FOREIGN KEY(LOTTERY_ID)
   REFERENCES TBL_LOTTERY(ID)
);

DROP TABLE TBL_MEMBER;
CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_EMAIL VARCHAR2(1000) UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(1000) NOT NULL,
   MEMBER_NAME VARCHAR2(1000) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(1000) NOT NULL,
   MEMBER_BIRTH DATE
);

CREATE TABLE TBL_DILIVERY(
   ID NUMBER CONSTRAINT PK_DILIVERY PRIMARY KEY,
   MEMBER_ID NUMBER NOT NULL,
   PRODUCT_ID NUMBER NOT NULL,
   DILEVERY_STATUS VARCHAR2(1000) DEFAULT '배송 준비 중',
   CONSTRAINT FK_DILEVERY_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID),
   CONSTRAINT FK_DILEVERY_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);

/*
1. 요구사항
   이커머스 창업 준비중입니다. 기업과 사용자 간 거래를 위해 기업의 정보와 사용자 정보가 필요합니다.
   기업의 정보는 기업 이름, 주소, 대표번호가 있고
   사용자 정보는 이름, 주소, 전화번호가 있습니다. 결제 시 사용자 정보와 기업의 정보, 결제한 카드의 정보 모두 필요하며,
   상품의 정보도 필요합니다. 상품의 정보는 이름, 가격, 재고입니다.
   사용자는 등록한 카드의 정보를 저장할 수 있으며, 카드의 정보는 카드번호, 카드사, 회원 정보가 필요합니다.

2. 개념 모델링
3. 논리 모델링
4. 물리 모델링
5. 구현
*/

DROP TABLE TBL_APPLY;
DROP TABLE TBL_COMPANY;

CREATE TABLE TBL_COMPANY(
   ID NUMBER CONSTRAINT PK_COMPANY PRIMARY KEY,
   COMPANY_NAME VARCHAR2(1000) NOT NULL,
   COMPANY_ADDRESS VARCHAR2(1000) NOT NULL,
   COMPANY_TEL VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CLIENT(
   ID NUMBER CONSTRAINT PK_CLIENT PRIMARY KEY,
   CLIENT_NAME VARCHAR2(1000) NOT NULL,
   CLIENT_ADDRESS VARCHAR2(1000) NOT NULL,
   CLIENT_PHONE VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CARD(
   ID NUMBER CONSTRAINT PK_CARD PRIMARY KEY,
   CARD_NUMBER VARCHAR2(1000) NOT NULL,
   CARD_COMPANY VARCHAR2(1000) NOT NULL,
   CLIENT_ID NUMBER NOT NULL,
   CONSTRAINT FK_CARD_CLIENT FOREIGN KEY(CLIENT_ID)
   REFERENCES TBL_CLIENT(ID)
);

DROP TABLE TBL_CIRCULATION;
DROP TABLE TBL_LOTTERY;
DROP TABLE TBL_DILIVERY;
DROP TABLE TBL_PRODUCT;

CREATE TABLE TBL_PRODUCT(
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_NAME VARCHAR2(1000) NOT NULL,
   PRODUCT_PRICE NUMBER DEFAULT 0,
   PRODUCT_STOCK NUMBER DEFAULT 0,
   COMPANY_ID NUMBER NOT NULL,
   CONSTRAINT FK_PRODUCT_COMPANY FOREIGN KEY(COMPANY_ID)
   REFERENCES TBL_COMPANY(ID)
);

CREATE TABLE TBL_PAY(
   ID NUMBER CONSTRAINT PK_PAY PRIMARY KEY,
   CARD_ID NUMBER NOT NULL,
   PRODUCT_ID NUMBER NOT NULL,
   CONSTRAINT FK_PAY_CARD FOREIGN KEY(CARD_ID)
   REFERENCES TBL_CARD(ID),
   CONSTRAINT FK_PAY_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);